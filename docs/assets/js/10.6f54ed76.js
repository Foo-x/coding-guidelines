(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{163:function(t,i,s){"use strict";s.r(i);var e=s(0),n=Object(e.a)({},function(){var t=this,i=t.$createElement,s=t._self._c||i;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("子クラスは親クラスの性質を引き継がなければいけません。例えば子クラスで以下のような実装を行ってはいけません。")]),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("LSPに違反したクラスが存在すると、そのクラスを利用する側で以下のような問題が発生します。")]),t._v(" "),s("ul",[s("li",[t._v("どの子クラスを使うか気にしなければいけない")]),t._v(" "),s("li",[t._v("子クラスの実装を知らなければいけない")]),t._v(" "),s("li",[t._v("その子クラスに強く結合する\n"),s("ul",[s("li",[s("router-link",{attrs:{to:"./OCP.html"}},[t._v("OCP (Open-Closed Principle)")]),t._v("にも同時に違反する")],1)])])]),t._v(" "),t._m(3)])},[function(){var t=this.$createElement,i=this._self._c||t;return i("h1",{attrs:{id:"lsp-liskov-substitution-principle"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#lsp-liskov-substitution-principle","aria-hidden":"true"}},[this._v("#")]),this._v(" LSP (Liskov Substitution Principle)")])},function(){var t=this.$createElement,i=this._self._c||t;return i("blockquote",[i("p",[this._v("リスコフの置換原則"),i("br"),this._v("\n派生型はその基底型と置換可能でなければならない")])])},function(){var t=this.$createElement,i=this._self._c||t;return i("ul",[i("li",[this._v("親クラスで定義しているフィールドを使用していない")]),this._v(" "),i("li",[this._v("親クラスのメソッドを全く別の処理に書き換えている")])])},function(){var t=this.$createElement,i=this._self._c||t;return i("p",[i("img",{staticClass:"emoji",attrs:{draggable:"false",alt:"✏️",src:"https://twemoji.maxcdn.com/2/svg/270f.svg"}}),this._v(" "),i("strong",[this._v("子クラスは親クラスの性質を引き継ぐ")])])}],!1,null,null,null);n.options.__file="LSP.md";i.default=n.exports}}]);