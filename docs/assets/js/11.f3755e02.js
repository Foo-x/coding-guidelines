(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{187:function(t,s,i){"use strict";i.r(s);var e=i(0),_=Object(e.a)({},function(){var t=this,s=t.$createElement,i=t._self._c||s;return i("div",{staticClass:"content"},[i("h1",{attrs:{id:"開放・閉鎖原則"}},[t._v("開放・閉鎖原則")]),t._v(" "),t._m(0),t._v(" "),i("p",[t._v("ソフトウェアは途中で仕様が変わるものです。その際に、機能の追加をしやすく、既存のコードに影響を与えないようにする必要があります。")]),t._v(" "),i("p",[t._v("仕様が変わりやすい箇所ではクラス間の依存をなくし、間にインターフェースを挟みましょう。そのインターフェースを実装したクラスを新たに作成していくことで、既存のコードに影響を与えずに機能の追加や修正を行うことができるようになります。")]),t._v(" "),t._m(1),t._v(" "),i("h2",{attrs:{id:"注意"}},[t._v("注意")]),t._v(" "),i("p",[t._v("変更が予測される箇所ではOCPを適用すべきですが、ほぼ変更されないようなクラスに対しても適用するのは"),i("router-link",{attrs:{to:"./../principles/YAGNI.html"}},[t._v("YAGNI")]),t._v("に違反します。そこで、実際に変更が発生してからOCPを適用するという方法もあります。")],1),t._v(" "),i("h2",{attrs:{id:"関連"}},[t._v("関連")]),t._v(" "),i("h3",{attrs:{id:"依存関係逆転の原則"}},[i("router-link",{attrs:{to:"./DIP.html"}},[t._v("依存関係逆転の原則")])],1),t._v(" "),i("p",[t._v("目的を実現する手段が同じです。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[s("strong",[this._v("OCP (Open-Closed Principle)")]),s("br"),this._v("\nクラスは拡張に対して開き、修正に対して閉じていなければいけない")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("NOTE")]),this._v(" "),s("p",[s("img",{staticClass:"emoji",attrs:{draggable:"false",alt:"✏️",src:"https://twemoji.maxcdn.com/2/svg/270f.svg"}}),this._v(" "),s("strong",[this._v("クラスは拡張可能かつ、既存のコードに影響を与えないようにする")])])])}],!1,null,null,null);_.options.__file="OCP.md";s.default=_.exports}}]);