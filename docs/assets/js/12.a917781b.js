(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{316:function(t,a,r){"use strict";r.r(a);var s=r(46),e=Object(s.a)({},function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"開放・閉鎖原則"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#開放・閉鎖原則","aria-hidden":"true"}},[t._v("#")]),t._v(" 開放・閉鎖原則")]),t._v(" "),r("blockquote",[r("p",[r("strong",[t._v("OCP (Open-Closed Principle)")]),r("br"),t._v("\nクラスは拡張に対して開き、修正に対して閉じていなければいけない")])]),t._v(" "),r("p",[t._v("ソフトウェアは途中で仕様が変わるものです。その際に、機能の追加をしやすく、既存のコードに影響を与えないようにする必要があります。")]),t._v(" "),r("p",[t._v("仕様が変わりやすい箇所ではクラス間の依存をなくし、間にインターフェースを挟みましょう。そのインターフェースを実装したクラスを新たに作成していくことで、既存のコードに影響を与えずに機能の追加や修正を行うことができるようになります。")]),t._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),r("p",[r("img",{staticClass:"emoji",attrs:{draggable:"false",alt:"✏️",src:"https://twemoji.maxcdn.com/2/svg/270f.svg"}}),t._v(" "),r("strong",[t._v("クラスは拡張可能かつ、既存のコードに影響を与えないようにする")])])]),t._v(" "),r("h2",{attrs:{id:"注意"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注意","aria-hidden":"true"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),r("p",[t._v("変更が予測される箇所ではOCPを適用すべきですが、ほぼ変更されないようなクラスに対しても適用するのは"),r("router-link",{attrs:{to:"/principles/YAGNI.html"}},[t._v("YAGNI")]),t._v("に違反します。そこで、実際に変更が発生してからOCPを適用するという方法もあります。")],1),t._v(" "),r("h2",{attrs:{id:"関連"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#関連","aria-hidden":"true"}},[t._v("#")]),t._v(" 関連")]),t._v(" "),r("h3",{attrs:{id:"依存関係逆転の原則"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#依存関係逆転の原則","aria-hidden":"true"}},[t._v("#")]),t._v(" "),r("router-link",{attrs:{to:"/architecture/DIP.html"}},[t._v("依存関係逆転の原則")])],1),t._v(" "),r("p",[t._v("目的を実現する手段が同じです。")])])},[],!1,null,null,null);a.default=e.exports}}]);