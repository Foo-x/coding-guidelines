(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{474:function(t,s,a){"use strict";a.r(s);var o=a(57),e=Object(o.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"単一責任原則"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#単一責任原則"}},[t._v("#")]),t._v(" 単一責任原則")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("SRP (Single Responsibility Principle)")]),a("br"),t._v("\nクラスを変更する理由は1つでなければならない")])]),t._v(" "),a("p",[t._v("クラスを変更する理由が複数存在すると、ある機能に対する変更が別の機能に影響を及ぼしやすくなります。そのため、既存の機能に影響が起きていないことを広い範囲でテストしなければならなくなります。変更理由が複数ある場合はその数だけ別のクラスに切り出しましょう。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[a("img",{staticClass:"emoji",attrs:{draggable:"false",alt:"✏️",src:"https://twemoji.maxcdn.com/2/svg/270f.svg"}}),t._v(" "),a("strong",[t._v("クラスが変更される理由は1つだけにする")])])]),t._v(" "),a("h2",{attrs:{id:"変更理由の数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#変更理由の数"}},[t._v("#")]),t._v(" 変更理由の数")]),t._v(" "),a("p",[t._v("変更理由の数はそのクラスの利用者×目的の数"),a("sup",{staticClass:"footnote-ref"},[a("a",{attrs:{href:"#fn1",id:"fnref1"}},[t._v("[1]")])]),t._v("です。たとえば、そのクラスが「開発者」向けの処理と「管理者」向けの処理を両方扱っているのであれば分離すべきです。値の「整形」と「保存」を両方扱っている場合も同様です。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[a("img",{staticClass:"emoji",attrs:{draggable:"false",alt:"✏️",src:"https://twemoji.maxcdn.com/2/svg/270f.svg"}}),t._v(" "),a("strong",[t._v("変更理由の数=利用者×目的の数")])])]),t._v(" "),a("hr",{staticClass:"footnotes-sep"}),t._v(" "),a("section",{staticClass:"footnotes"},[a("ol",{staticClass:"footnotes-list"},[a("li",{staticClass:"footnote-item",attrs:{id:"fn1"}},[a("p",[t._v("ユースケース図での「アクター」と「ユースケース」 "),a("a",{staticClass:"footnote-backref",attrs:{href:"#fnref1"}},[t._v("↩︎")])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);