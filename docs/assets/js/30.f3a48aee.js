(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{317:function(t,s,a){"use strict";a.r(s);var e=a(17),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"開放・閉鎖原則"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#開放・閉鎖原則"}},[t._v("#")]),t._v(" 開放・閉鎖原則")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("OCP (Open-Closed Principle)")]),s("br"),t._v("\nクラスは拡張に対して開き、修正に対して閉じていなければいけない")])]),t._v(" "),s("p",[t._v("ソフトウェアは途中で仕様が変わるものです。その際に、機能の追加をしやすく、既存のコードに影響を与えないようにする必要があります。")]),t._v(" "),s("p",[t._v("仕様が変わりやすい箇所ではクラス間の依存をなくし、間にインターフェースを挟みましょう。そのインターフェースを実装したクラスを新たに作成していくことで、既存のコードに影響を与えずに機能の追加や修正を行うことができるようになります。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),s("p",[s("img",{staticClass:"emoji",attrs:{draggable:"false",alt:"✏️",src:"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/270f.svg"}}),t._v(" "),s("strong",[t._v("クラスは拡張可能かつ、既存のコードに影響を与えないようにする")])])]),t._v(" "),s("h2",{attrs:{id:"注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),s("p",[t._v("変更が予測される箇所ではOCPを適用すべきですが、ほぼ変更されないようなクラスに対しても適用するのは"),s("RouterLink",{attrs:{to:"/principles/YAGNI.html"}},[t._v("YAGNI")]),t._v("に違反します。そこで、実際に変更が発生してからOCPを適用するという方法もあります。")],1)])}),[],!1,null,null,null);s.default=r.exports}}]);