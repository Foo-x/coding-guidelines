(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{330:function(t,r,v){"use strict";v.r(r);var _=v(14),s=Object(_.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"コマンドクエリ分離原則"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#コマンドクエリ分離原則"}},[t._v("#")]),t._v(" コマンドクエリ分離原則")]),t._v(" "),r("blockquote",[r("p",[r("strong",[t._v("CQS (Command Query Separation)")]),r("br"),t._v("\n関数をコマンドとクエリに分ける")])]),t._v(" "),r("p",[t._v("関数は副作用を持つものと持たないものに分けましょう。副作用とはその関数の外の状態を変化させることです。インスタンス変数の上書きや、ファイルI/Oなどがあります。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("コマンド")]),t._v(": 副作用を持ち、値を返さない")]),t._v(" "),r("li",[r("strong",[t._v("クエリ")]),t._v(": 副作用を持たず、値を返す")])]),t._v(" "),r("p",[t._v("コマンドは注意して扱う必要があります。副作用を持つということは、実行した順番によって結果が変わるからです。一方、クエリは状態を変えないので、いつ実行しても良く、順番を変えることもできます。コマンドとクエリを明確に分けることで、関数が使いやすくなります。")]),t._v(" "),r("h2",{attrs:{id:"注意"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),r("p",[t._v("配列の "),r("code",[t._v("pop")]),t._v(" や、"),r("code",[t._v("Fluent setters")]),t._v(" パターンのように、副作用を持ちながら値を返すケースがあります。これらは原則を満たしていませんが、副作用の範囲が限定的であることや、すでに多くの開発者の共通認識になっていることから、例外と言えます。基本的には原則を満たすようにしましょう。")]),t._v(" "),r("p",[t._v("なお、そもそも現代では、副作用を持つ関数自体を減らしたほうが良いとされています。これは "),r("RouterLink",{attrs:{to:"/logic/immutability.html"}},[t._v("不変性")]),t._v(" とも関連します。")],1)])}),[],!1,null,null,null);r.default=s.exports}}]);